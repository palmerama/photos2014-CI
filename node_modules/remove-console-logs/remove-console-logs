#!/usr/bin/env node
/* Copyright 2012 Huygens ING
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

var optimist = require('optimist');
var LogRemover = require('./logremover.js');
var fs = require('fs');
var path = require('path');

var remover = new LogRemover();


var myArgs = optimist.usage("Remove console logs from a JS file.\nUsage: $0 [files]\nIf specified, [files] will override the --input and --output options.\n")
                     .alias('h', 'help')
                     .alias('l', 'logonly')
                     .alias('i', 'input')
                     .alias('o', 'output')
                     .alias('io', 'inout')
                     .default('o', 'stdout')
                     .default('i', 'stdin')
                     .default('l', false)
                     .describe('i', 'Read input from this file, "stdin" to read from standard in.')
                     .describe('o', 'Write output to this file, "stdout" to write to standard out.')
                     .describe('io', 'Read and write to this file. Overrides the --input and --output options.')
                     .describe('l', 'Limit to replacing the "log" method, otherwise all other console calls will be removed, too.')
                     .describe('h', 'Print this help.');

var args = myArgs.argv;

if (args.h) {
  myArgs.showHelp();
  process.exit(0);
}

var files;
var gotListOfFiles = false;
if (args._ && args._.length) {
  gotListOfFiles = true;
  files = args._;
  files = files.map(function(x) {
    return [x, x];
  });
} else {
  if (args.io != '') {
    args.o = args.io;
    args.i = args.io;
  }
  files = [[args.i, args.o]];
}


var batchMode = gotListOfFiles;
if (batchMode) {
  console.log("Using batch processing mode, processing all given files in-place.");
  var dirsPending = 0;
  remover.on('dirs', function(dir) {
    dirsPending++;
    fs.readdir(dir, function(err, files) {
      dirsPending--;
      if (err) {
        console.error("Error reading directory '", dir, "':", err);
      } else if (files && files.length) {
        files.forEach(function(file) {
          // Second condition here is to catch directories. Not strictly speaking fully correct,
          // but easier than stat'ing and checking.
          if (file.lastIndexOf('.js') == file.length - 3 || file.indexOf('.') == -1) {
            var fullPath = path.join(dir, file);
            remover.remove(fullPath, fullPath, args.l, batchMode, true);
          }
        });
      }
    });
  });
  remover.on('finished', function(totalFileCount) {
    if (!dirsPending) {
      console.log("Finished, processed " + totalFileCount + " successfully.");
      process.exit(0);
    }
  });
}

for (var i = 0; i < files.length; i++) {
  remover.remove(files[i][0], files[i][1], args.l, batchMode);
}


